// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zeemlin.Data.DbContexts;

#nullable disable

namespace Zeemlin.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240306200612_FixedBugSeedDataMigration")]
    partial class FixedBugSeedDataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.HomeworkAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("HomeworkId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.ToTable("HomeworkAssets", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.SchoolAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolAssets", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.TeacherAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherAssets", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AssessmentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Grades", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Homework", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Homeworks", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.LessonAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LessonAttendanceType")
                        .HasColumnType("integer");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonAttendances", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.LessonTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonsTable");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Parent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short?>("BuildingNumber")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short?>("EntranceNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short?>("Floor")
                        .HasColumnType("smallint");

                    b.Property<string>("GeneralAddressMFY")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("HouseNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StudentUniqueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Difficulty")
                        .HasColumnType("smallint");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Questiones");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CallCenter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("DirectorId")
                        .HasColumnType("bigint");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmailCenter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GeneralAddressMFY")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<long>("SchoolNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("SuperAdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("SuperAdminId");

                    b.ToTable("Schools", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CallCenter = "+998900000001",
                            Country = "O'zbekiston",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4771),
                            Description = "Xalqaro standartlarga asoslangan innovatsion ta'lim muassasasi",
                            DirectorId = 1L,
                            DistrictName = "Mirzo Ulug'bek",
                            EmailCenter = "TXM@school.com",
                            GeneralAddressMFY = "Uch Qahramon MFY",
                            Name = "Toshkent Xalqaro Maktabi",
                            Region = 2,
                            SchoolNumber = 12345L,
                            StreetName = "Bog'ishamol ko'chasi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "TXM.com"
                        },
                        new
                        {
                            Id = 2L,
                            CallCenter = "+998900000002",
                            Country = "O'zbekiston",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4783),
                            Description = "Yuqori malakali mutaxassislar tayyorlaydigan oliy ta'lim muassasasi",
                            DirectorId = 2L,
                            DistrictName = "Eskishahar",
                            EmailCenter = "STI@school.com",
                            GeneralAddressMFY = "Xo'ja Ahror Vali MFY",
                            Name = "Samarqand Texnologiya Instituti",
                            Region = 11,
                            SchoolNumber = 54321L,
                            StreetName = "Registon ko'chasi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "STI.com"
                        },
                        new
                        {
                            Id = 3L,
                            CallCenter = "+998900000003",
                            Country = "O'zbekiston",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4787),
                            Description = "Pedagogika sohasida yuqori malakali mutaxassislar tayyorlaydigan oliy ta'lim muassasasi",
                            DirectorId = 3L,
                            DistrictName = "Shahriston",
                            EmailCenter = "API@school.com",
                            GeneralAddressMFY = "Pedagogika instituti",
                            Name = "Andijon Pedagogika Instituti",
                            Region = 3,
                            SchoolNumber = 67890L,
                            StreetName = "Pedagogika ko'chasi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "API.com"
                        },
                        new
                        {
                            Id = 4L,
                            CallCenter = "+998900000004",
                            Country = "O'zbekiston",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4789),
                            Description = "Oliy ta'lim sohasida yuqori malakali mutaxassislar tayyorlaydigan davlat universiteti",
                            DirectorId = 4L,
                            DistrictName = "Namangan shahri",
                            EmailCenter = "NDU@school.com",
                            GeneralAddressMFY = "Universitet",
                            Name = "Namangan Davlat Universiteti",
                            Region = 4,
                            SchoolNumber = 98765L,
                            StreetName = "Universitet ko'chasi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "NDU.com"
                        },
                        new
                        {
                            Id = 5L,
                            CallCenter = "+998900000013",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4791),
                            Description = "Center providing language training services.",
                            DirectorId = 3L,
                            DistrictName = "Yunusabad",
                            EmailCenter = "info@tltraining.com",
                            GeneralAddressMFY = "Language Training Center",
                            Name = "Tashkent Language Training Center",
                            Region = 1,
                            SchoolNumber = 13579L,
                            StreetName = "Language Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://tltraining.com"
                        },
                        new
                        {
                            Id = 6L,
                            CallCenter = "+998900000014",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4795),
                            Description = "Center offering computer training courses.",
                            DirectorId = 4L,
                            DistrictName = "Samarqand shahri",
                            EmailCenter = "info@sctc.uz",
                            GeneralAddressMFY = "Computer Training Center",
                            Name = "Samarkand Computer Training Center",
                            Region = 11,
                            SchoolNumber = 24680L,
                            StreetName = "Computer Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sctc.uz"
                        },
                        new
                        {
                            Id = 7L,
                            CallCenter = "+998900000015",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4860),
                            Description = "Fitness center offering various training programs.",
                            DirectorId = 1L,
                            DistrictName = "Navoiy shahri",
                            EmailCenter = "info@navfit.com",
                            GeneralAddressMFY = "Fitness Training Center",
                            Name = "Navoiy Fitness Training Center",
                            Region = 9,
                            SchoolNumber = 35791L,
                            StreetName = "Fitness Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://navfit.com"
                        },
                        new
                        {
                            Id = 8L,
                            CallCenter = "+998900000016",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4863),
                            Description = "Center specializing in photography training.",
                            DirectorId = 2L,
                            DistrictName = "Termiz shahri",
                            EmailCenter = "info@sptc.uz",
                            GeneralAddressMFY = "Photography Training Center",
                            Name = "Surxondaryo Photography Training Center",
                            Region = 12,
                            SchoolNumber = 46802L,
                            StreetName = "Photography Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sptc.uz"
                        },
                        new
                        {
                            Id = 9L,
                            CallCenter = "+998900000017",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4865),
                            Description = "Center providing language training services.",
                            DirectorId = 3L,
                            DistrictName = "Yunusabad",
                            EmailCenter = "info@tltraining.com",
                            GeneralAddressMFY = "Yunusabad MFY",
                            Name = "Tashkent Language Training Center",
                            Region = 1,
                            SchoolNumber = 13579L,
                            StreetName = "Mustaqillik Avenue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://tltraining.com"
                        },
                        new
                        {
                            Id = 10L,
                            CallCenter = "+998900000018",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4868),
                            Description = "Center offering computer training courses.",
                            DirectorId = 4L,
                            DistrictName = "Samarqand shahri",
                            EmailCenter = "info@sctc.uz",
                            GeneralAddressMFY = "Samarqand MFY",
                            Name = "Samarkand Computer Training Center",
                            Region = 11,
                            SchoolNumber = 24680L,
                            StreetName = "Amir Temur Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sctc.uz"
                        },
                        new
                        {
                            Id = 11L,
                            CallCenter = "+998900000019",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4870),
                            Description = "Fitness center offering various training programs.",
                            DirectorId = 1L,
                            DistrictName = "Navoiy shahri",
                            EmailCenter = "info@navfit.com",
                            GeneralAddressMFY = "Navoiy MFY",
                            Name = "Navoiy Fitness Training Center",
                            Region = 9,
                            SchoolNumber = 35791L,
                            StreetName = "Olmazor Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://navfit.com"
                        },
                        new
                        {
                            Id = 12L,
                            CallCenter = "+998900000020",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4873),
                            Description = "Center specializing in photography training.",
                            DirectorId = 5L,
                            DistrictName = "Termiz shahri",
                            EmailCenter = "info@sptc.uz",
                            GeneralAddressMFY = "Termiz MFY",
                            Name = "Surxondaryo Photography Training Center",
                            Region = 12,
                            SchoolNumber = 46802L,
                            StreetName = "Shaxrisabz Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sptc.uz"
                        },
                        new
                        {
                            Id = 13L,
                            CallCenter = "+998900000021",
                            Country = "Uzbekistan",
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 920, DateTimeKind.Utc).AddTicks(4875),
                            Description = "Center specializing in photography training.",
                            DirectorId = 5L,
                            DistrictName = "Termiz shahri",
                            EmailCenter = "info@sptc.uz",
                            GeneralAddressMFY = "Termiz MFY",
                            Name = "Surxondaryo Photography Training Center",
                            Region = 12,
                            SchoolNumber = 4680L,
                            StreetName = "Shaxrisabz Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sptc.uz"
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short?>("BuildingNumber")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short?>("EntranceNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short?>("Floor")
                        .HasColumnType("smallint");

                    b.Property<string>("GeneralAddressMFY")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<short>("HouseNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SchoolNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StudentUniqueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.StudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGroups", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SchoolNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("ScienceType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("genderType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.TeacherGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherGroups", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportSeria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SuperAdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SuperAdminId");

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8685),
                            Email = "johndoe@admin1.com",
                            FirstName = "John",
                            Gender = (byte)1,
                            LastName = "Doe",
                            PassportSeria = "AB123456",
                            Password = "hashed_password",
                            SchoolId = 1L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8697),
                            Email = "janesmith@admin2.com",
                            FirstName = "Jane",
                            Gender = (byte)2,
                            LastName = "Smith",
                            PassportSeria = "CD789012",
                            Password = "hashed_password",
                            SchoolId = 1L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school1"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8699),
                            Email = "michaeljohnson@admin1.com",
                            FirstName = "Michael",
                            Gender = (byte)1,
                            LastName = "Johnson",
                            PassportSeria = "EF345678",
                            Password = "hashed_password",
                            SchoolId = 2L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school2"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8709),
                            Email = "emmadavis@admin2.com",
                            FirstName = "Emma",
                            Gender = (byte)2,
                            LastName = "Davis",
                            PassportSeria = "GH901234",
                            Password = "hashed_password",
                            SchoolId = 2L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school2"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8711),
                            Email = "williambrown@admin1.com",
                            FirstName = "William",
                            Gender = (byte)1,
                            LastName = "Brown",
                            PassportSeria = "IJ567890",
                            Password = "hashed_password",
                            SchoolId = 3L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school3"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8714),
                            Email = "oliviataylor@admin2.com",
                            FirstName = "Olivia",
                            Gender = (byte)2,
                            LastName = "Taylor",
                            PassportSeria = "KL123456",
                            Password = "hashed_password",
                            SchoolId = 3L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school3"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8727),
                            Email = "davidwilson@admin1.com",
                            FirstName = "David",
                            Gender = (byte)1,
                            LastName = "Wilson",
                            PassportSeria = "MN789012",
                            Password = "hashed_password",
                            SchoolId = 4L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school4"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8729),
                            Email = "sophiamartinez@admin2.com",
                            FirstName = "Sophia",
                            Gender = (byte)2,
                            LastName = "Martinez",
                            PassportSeria = "OP345678",
                            Password = "hashed_password",
                            SchoolId = 4L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school4"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8731),
                            Email = "jamesanderson@admin1.com",
                            FirstName = "James",
                            Gender = (byte)1,
                            LastName = "Anderson",
                            PassportSeria = "QR901234",
                            Password = "hashed_password",
                            SchoolId = 5L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school5"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8734),
                            Email = "avahernandez@admin2.com",
                            FirstName = "Ava",
                            Gender = (byte)2,
                            LastName = "Hernandez",
                            PassportSeria = "ST567890",
                            Password = "hashed_password",
                            SchoolId = 5L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school5"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8736),
                            Email = "benjaminyoung@admin1.com",
                            FirstName = "Benjamin",
                            Gender = (byte)1,
                            LastName = "Young",
                            PassportSeria = "UV123456",
                            Password = "hashed_password",
                            SchoolId = 6L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school6"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8738),
                            Email = "mialopez@admin2.com",
                            FirstName = "Mia",
                            Gender = (byte)2,
                            LastName = "Lopez",
                            PassportSeria = "WX789012",
                            Password = "hashed_password",
                            SchoolId = 6L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school6"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8739),
                            Email = "danielgonzalez@admin1.com",
                            FirstName = "Daniel",
                            Gender = (byte)1,
                            LastName = "Gonzalez",
                            PassportSeria = "YZ345678",
                            Password = "hashed_password",
                            SchoolId = 7L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school7"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8741),
                            Email = "isabellaperez@admin2.com",
                            FirstName = "Isabella",
                            Gender = (byte)2,
                            LastName = "Perez",
                            PassportSeria = "AB901234",
                            Password = "hashed_password",
                            SchoolId = 7L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school7"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTime(2024, 3, 7, 1, 6, 11, 917, DateTimeKind.Local).AddTicks(8747),
                            Email = "islom.karimov@admin1.com",
                            FirstName = "Islom",
                            Gender = (byte)1,
                            LastName = "Karimov",
                            PassportSeria = "MN567890",
                            Password = "hashed_password",
                            SchoolId = 8L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school4"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8803),
                            Email = "noziman.yoldosheva@admin2.com",
                            FirstName = "Nozima",
                            Gender = (byte)2,
                            LastName = "Yo'ldosheva",
                            PassportSeria = "OP123456",
                            Password = "hashed_password",
                            SchoolId = 8L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school4"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8804),
                            Email = "ethanmoore@admin1.com",
                            FirstName = "Ethan",
                            Gender = (byte)1,
                            LastName = "Moore",
                            PassportSeria = "CD901234",
                            Password = "hashed_password",
                            SchoolId = 9L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school9"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8807),
                            Email = "charlotterogers@admin2.com",
                            FirstName = "Charlotte",
                            Gender = (byte)2,
                            LastName = "Rogers",
                            PassportSeria = "EF567890",
                            Password = "hashed_password",
                            SchoolId = 9L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school9"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8809),
                            Email = "alexanderscott@admin1.com",
                            FirstName = "Alexander",
                            Gender = (byte)1,
                            LastName = "Scott",
                            PassportSeria = "GH123456",
                            Password = "hashed_password",
                            SchoolId = 10L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school10"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8811),
                            Email = "ameliagomez@admin2.com",
                            FirstName = "Amelia",
                            Gender = (byte)2,
                            LastName = "Gomez",
                            PassportSeria = "IJ789012",
                            Password = "hashed_password",
                            SchoolId = 10L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school10"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8812),
                            Email = "henrywright@admin1.com",
                            FirstName = "Henry",
                            Gender = (byte)1,
                            LastName = "Wright",
                            PassportSeria = "KL345678",
                            Password = "hashed_password",
                            SchoolId = 11L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school11"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8814),
                            Email = "sophieflores@admin2.com",
                            FirstName = "Sophie",
                            Gender = (byte)2,
                            LastName = "Flores",
                            PassportSeria = "MN901234",
                            Password = "hashed_password",
                            SchoolId = 11L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school11"
                        },
                        new
                        {
                            Id = 23L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8816),
                            Email = "liamsanchez@admin1.com",
                            FirstName = "Liam",
                            Gender = (byte)1,
                            LastName = "Sanchez",
                            PassportSeria = "OP567890",
                            Password = "hashed_password",
                            SchoolId = 12L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school12"
                        },
                        new
                        {
                            Id = 24L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8818),
                            Email = "gracechang@admin2.com",
                            FirstName = "Grace",
                            Gender = (byte)2,
                            LastName = "Chang",
                            PassportSeria = "QR123456",
                            Password = "hashed_password",
                            SchoolId = 12L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school12"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8826),
                            Email = "cmwp@admin2.com",
                            FirstName = "mps",
                            Gender = (byte)2,
                            LastName = "cmwp",
                            PassportSeria = "QR123456",
                            Password = "hashed_password",
                            SchoolId = 13L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin3_school12"
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Director", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportSeria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Directors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8900),
                            Email = "olimjon.torayev@director.com",
                            FirstName = "Olimjon",
                            Gender = (byte)1,
                            LastName = "To'rayev",
                            PassportSeria = "AB123456",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8906),
                            Email = "nodira.xolmirzayeva@director.com",
                            FirstName = "Nodira",
                            Gender = (byte)2,
                            LastName = "Xolmirzayeva",
                            PassportSeria = "CD789012",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8908),
                            Email = "sarvar.qosimov@director.com",
                            FirstName = "Sarvar",
                            Gender = (byte)1,
                            LastName = "Qosimov",
                            PassportSeria = "EF345678",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8911),
                            Email = "malika.azizova@director.com",
                            FirstName = "Malika",
                            Gender = (byte)2,
                            LastName = "Azizova",
                            PassportSeria = "GH567890",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8913),
                            Email = "islom.karimov@director.com",
                            FirstName = "Islom",
                            Gender = (byte)1,
                            LastName = "Karimov",
                            PassportSeria = "IJ789012",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director5"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8916),
                            Email = "ikcmwopv@director.com",
                            FirstName = "mcpw",
                            Gender = (byte)1,
                            LastName = "cmla",
                            PassportSeria = "IJ785212",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director5"
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.SuperAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportSeria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SuperAdmins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8570),
                            Email = "shahnozaodilova@gmail.com",
                            FirstName = "Shahnoza",
                            Gender = (byte)2,
                            LastName = "Odilova",
                            PassportSeria = "AB123456",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8579),
                            Email = "moxi05@gmail.com",
                            FirstName = "Moxinur",
                            Gender = (byte)2,
                            LastName = "Zokirova",
                            PassportSeria = "CD789012",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8581),
                            Email = "akbarov@gmail.com",
                            FirstName = "Muhammadjon",
                            Gender = (byte)1,
                            LastName = "Akbarov",
                            PassportSeria = "AB123458",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8583),
                            Email = "ruxshona0@gmail.com",
                            FirstName = "Ruxshona",
                            Gender = (byte)2,
                            LastName = "Nodirova",
                            PassportSeria = "CD789013",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 3, 6, 20, 6, 11, 917, DateTimeKind.Utc).AddTicks(8586),
                            Email = "kimdir@gmail.com",
                            FirstName = "Kimdir",
                            Gender = (byte)2,
                            LastName = "Bilmiman",
                            PassportSeria = "CD789014",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin4"
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.HomeworkAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Homework", "Homework")
                        .WithMany("Assets")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homework");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.SchoolAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.TeacherAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Course", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.School", "School")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Grade", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Group", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Homework", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Homework")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.LessonAttendance", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Student", "Student")
                        .WithMany("LessonAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.LessonTable", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Answer", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Questions.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Question", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Questions.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Questions")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Quiz", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.School", "School")
                        .WithMany("Quizzes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.School", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Users.Director", "Director")
                        .WithMany("Schools")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.SuperAdmin", null)
                        .WithMany("Schools")
                        .HasForeignKey("SuperAdminId");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Student", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.StudentGroup", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Student", "Student")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Subject", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Subjects")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.TeacherGroup", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Group", "Group")
                        .WithMany("TeacherGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Teacher", "Teacher")
                        .WithMany("TeacherGroups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Admin", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.SuperAdmin", null)
                        .WithMany("Admins")
                        .HasForeignKey("SuperAdminId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Course", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Group", b =>
                {
                    b.Navigation("StudentGroups");

                    b.Navigation("TeacherGroups");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Homework", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Homework");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.School", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("LessonAttendances");

                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TeacherGroups");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Director", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.SuperAdmin", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Schools");
                });
#pragma warning restore 612, 618
        }
    }
}
